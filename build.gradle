plugins {
    //id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'fabric-loom' version '0.6-SNAPSHOT'
    //id "maven-publish"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def build_number = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : 'CUSTOM'

group = package_group
archivesBaseName = "${mod_name}-fabric"
version = "${minecraft_version}-${mod_version}-${build_number}"

minecraft {
    refmapName = mod_name.toLowerCase() + '-refmap.json'
}

repositories {
    maven { url "https://maven.tehnut.info" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
            
    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    //Hwyla
    modCompile "mcp.mobius.waila:Hwyla:${waila_version}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'info/tehnut/soulshards/api/**/*'
    classifier = 'api'
}
/*
publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact sourcesJar
            artifact apiJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

def curseRelations = {
    requiredLibrary 'fabric-api'
}

curseforge {
    if (project.hasProperty('curse_key_TehNut'))
        apiKey = project.curse_key_TehNut

    project {
        id = "${curse_id}"
        changelog = getChangelogText()
        releaseType = 'release'

        relations curseRelations

        addGameVersion "1.14.3"
        addGameVersion "Java 8"
        addGameVersion "Fabric"
        addArtifact sourcesJar
        addArtifact apiJar
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

String getChangelogText() {
    def changelogFile = new File('changelog.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}
*/